---
- name: block nginx-revproxy
  block:
    - name: Install Nginx and ssl-cert
      apt:
        name:
          - nginx
          - ssl-cert
        state: present
      tags:
        - nginx
        - packages

    - name: nginx show
      systemd:
        name: nginx
        state: started
      register: nginx_status
      delay: 10
      retries: 12
      until: nginx_status['status']['SubState'] == 'running' and nginx_status['status']['ActiveState'] == 'active'
      tags:
        - nginx

    - name: make certs directory
      file:
        name: "{{ item.value.ssl_certicate_path_dest }}"
        state: directory
        owner: root
        group: ssl-cert
        mode: go-r
      with_dict: "{{ nginx_revproxy_sites }}"
      changed_when: False
      when:
        - item.value.ssl_certicate_path_dest is defined
      tags:
        - nginx

    - name: rsync certificates
      synchronize:
        src: "{{ item.value.ssl_certificate_path_src}}/"
        dest: "{{ item.value.ssl_certicate_path_dest }}"
        copy_links: yes
        recursive: yes
      with_dict: "{{ nginx_revproxy_sites }}"
      changed_when: False
      when:
        - item.value.ssl_certificate_path_src is defined
        - item.value.ssl_certicate_path_dest is defined
      tags:
        - nginx

    - name: Install python-passlib for Python 3 hosts
      apt:
        name:
          - "python3-passlib"
        state: present
      register:
        result
      delay: 10
      retries: 12
      until: result is successful
      tags:
        - nginx
        - packages
      when:
        - ansible_python['version']['major'] == 3

    - name: Install python-passlib for Python 2 hosts
      apt:
        name:
          - "python-passlib"
        state: present
      register:
        result
      delay: 10
      retries: 12
      until: result is successful
      tags:
        - nginx
        - packages
      when:
        - ansible_python['version']['major'] == 2

    - name: add http proxy parameters
      template:
        src: proxy.conf.j2
        dest: /etc/nginx/conf.d/proxy.conf
        owner: root
        group: root
      notify: Reload Nginx
      when: nginx_proxy_conf is defined

    - name: edit nginx.conf
      lineinfile:
        path: /etc/nginx/nginx.conf
        regexp: "{{ item.key }} "
        line: "        {{ item.key }} {{ item.value }};"
        owner: root
        group: root
        insertafter: '^http {'
      loop: "{{ nginx_revproxy_http | dict2items }}"
      notify: Reload Nginx
      when: nginx_revproxy_http is defined

    - name: Set up nginx directories
      file:
        path: "/etc/nginx/{{ item }}"
        state: directory
        owner: root
        group: root
      with_items:
        - sites-available
        - sites-enabled
      tags:
        - nginx

    - name: Add authentication
      htpasswd:
        path: "/etc/nginx/{{ item.key }}_htpasswd"
        name: "{{ item.value.auth.login }}"
        password: "{{ item.value.auth.password }}"
      with_dict: "{{ nginx_revproxy_sites }}"
      when:
        - item.value.auth.htpasswd is defined and item.value.auth.htpasswd
        - item.value.auth.login is defined
        - item.value.auth.password is defined
      tags:
        - nginx

    - name: Add Site Config
      template:
        src: reverseproxy.conf.j2
        dest: /etc/nginx/sites-available/{{ item.key }}.conf
        owner: root
        group: root
      notify: Reload Nginx
      with_dict: "{{ nginx_revproxy_sites }}"
      when:
        - not item.value.ssl | default(True)
        - not item.value.letsencrypt | default(True)
      tags:
        - nginx

    - name: Add Https Site Config
      template:
        src: reverseproxy_ssl.conf.j2
        dest: /etc/nginx/sites-available/{{ item.key }}.conf
        owner: root
        group: root
      notify: Reload Nginx
      with_dict: "{{ nginx_revproxy_sites }}"
      when:
        - item.value.ssl | default(False)
        - not item.value.letsencrypt | default(True)
      tags:
        - nginx

    - name: Get Active Sites
      command: ls -1 /etc/nginx/sites-enabled/
      changed_when: "active.stdout_lines != nginx_revproxy_sites.keys()|sort()"
      check_mode: false
      register: active
      tags:
        - nginx

    - name: De-activate Sites
      file:
        path: /etc/nginx/sites-enabled/{{ item }}
        state: absent
      with_items: "{{ active.stdout_lines }}"
      notify: Reload Nginx
      when:
        - item not in nginx_revproxy_sites
      tags:
        - nginx

    - name: Enable Site Config
      file:
        src: /etc/nginx/sites-available/{{ item.key }}.conf
        dest: /etc/nginx/sites-enabled/{{ item.key }}
        state: link
      with_dict: "{{ nginx_revproxy_sites }}"
      notify: Reload Nginx
      when:
        - not item.value.letsencrypt | default(True)
        - not ansible_check_mode
      tags:
        - nginx

    - name: Create WebRoot sites
      file:
        dest: /var/www/{{ item.key }}/.well-known
        mode: 0775
        state: directory
        owner: www-data
        group: www-data
      with_dict: "{{ nginx_revproxy_sites }}"
      notify: Reload Nginx
      tags:
        - nginx

    - name: WebRoot Permissions Sites
      file:
        dest: /var/www/{{ item.key }}
        mode: 0775
        state: directory
        owner: www-data
        group: www-data
        recurse: true
      with_dict: "{{ nginx_revproxy_sites }}"
      notify: Reload Nginx
      tags:
        - nginx

    - name: Get WebRoot Sites
      command: ls -1 /var/www/
      changed_when: "webroot.stdout_lines != nginx_revproxy_sites.keys()|sort()"
      check_mode: false
      register: webroot
      tags:
        - nginx

    - name: Remove WebRoot Sites
      file:
        path: /var/www/{{ item }}/
        state: absent
      with_items: "{{ webroot.stdout_lines }}"
      notify: Reload Nginx
      when:
        - item not in nginx_revproxy_sites
      tags:
        - nginx

    - include_tasks: letsencrypt.yml
      tags:
        - lesencrypt
        - nginx
  when: nginx_revproxy and ansible_distribution != "MacOSX"
